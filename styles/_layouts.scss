/**
 * Every Layout's layout primitives as SCSS mixins.
 */

/**
 * Box layout primitive.
 *
 * @see https://every-layout.dev/layouts/box/
 */
@mixin box(
  $border: 1px solid #000000,
  $padding: 1rem,
) {
  border: $border;
  padding: $padding;
}

/**
 * Center layout primitive.
 *
 * @see https://every-layout.dev/layouts/center/
 */
@mixin center(
  $max-width: 1200px,
  $padding: 1rem,
  $text-align: false,
  $use-intrinsic-centering: false
) {
  // See https://every-layout.dev/rudiments/boxes/#the-box-sizing-property
  box-sizing: content-box;

  // Center and limit the size.
  max-inline-size: $max-width;
  margin-inline: auto;

  // Support for gutters.
  @if ( $padding ) {
    padding-inline-start: $padding;
    padding-inline-end: $padding;
  }

  @if ( $text-align ) {
    text-align: $text-align;
  }

  // Support for intrinsic centering.
  // To be honest, I'm not sure what this does - James B.
  @if ( $use-intrinsic-centering ) {
    display:flex;
    flex-direction: column;
    align-items: center;
  }
}

/**
 * Cluster layout primitive.
 *
 * @see https://every-layout.dev/layouts/cluster/
 */
@mixin cluster(
  $align-items: center,
  $gap: 1rem,
  $justify-content: flex-start,
) {
  align-items: $align-items;
  display: flex;
  flex-wrap: wrap;
  gap: $gap;
  justify-content: $justify-content;
}

/**
 * Cover layout primitive.
 *
 *
 * @props $minimum-height The minimum height (block-size) of the parent
 *                        element, before it grows to accommodate its content.
 * @props $space          The minimum space between and around the child
 *                        elements.
 * @props $tag            The element that should be towards the vertical
 *                        center of the space. Identify with a simple selector
 *                        like h2 (classes etc not supported in this generator).
 * @see https://every-layout.dev/layouts/cover/
 */
@mixin cover(
  $minimum-height: 100vh,
  $padding: 1rem,
  $space: 1rem,
  $tag: h1,
) {
  display: flex;
  flex-direction: column;
  min-block-size: $minimum-height;
  object-fit: cover;
  padding: $padding;

  > * {
    margin-block: $space;
  }

  > :first-child:not(#{$tag}) {
    margin-block-start: 0;
  }

  > :last-child:not(#{$tag}) {
    margin-block-end: 0;
  }

  > #{$tag} {
    margin-block: auto;
  }
}

/**
 * Frame layout primitive.
 *
 * @see https://every-layout.dev/layouts/frame/
 */
@mixin frame(
  $aspect-ratio: 16 / 9,
) {
  aspect-ratio: $aspect-ratio;
  overflow: hidden;
  display: flex;
  justify-content: center;
  align-items: center;

  > img,
  > video {
    inline-size: 100%;
    block-size: 100%;
    object-fit: cover;
  }
}

/**
 * Grid layout primitive.
 *
 * @see https://every-layout.dev/layouts/grid/
 */
@mixin grid(
  $minimum: 250px,
  $grid-gap: 1rem,
) {
  display: grid;
  grid-gap: $grid-gap;

  @supports ( width: min( $minimum, 100% ) ) {
    & {
      grid-template-columns: repeat( auto-fit, minmax( min( $minimum, 100% ), 1fr ) );
    }
  }
}

/**
 * Icon layout primitive.
 *
 * @see https://every-layout.dev/layouts/icon/
 */
@mixin icon(
  $gap: 1rem,
  $side: left,
) {
  display: inline-flex;
  align-items: baseline;

  svg {
    height: 0.75em;
    height: 1cap;
    width: 0.75em;
    width: 1cap;

    @if $side == left {
      margin-inline-end: $gap;
    }

    @if $side == right {
      margin-inline-start: $gap;
    }

    @if $side == both {
      margin-inline-start: $gap;
      margin-inline-end: $gap;
    }
  }
}

/**
 * Imposter layout primitive.
 *
 * @see https://every-layout.dev/layouts/imposter/
 */
@mixin imposter(
  $margin: 0px,
  $fixed: false,
) {
  @if ( $fixed ) {
    position: fixed;
  } else {
    position: absolute;
  }

  // inset-block-start: 50%;
  // inset-inline-start: 50%;
  // transform: translate(-50%, -50%);

  .contain {
    --margin: 0px;
    overflow: auto;
    max-inline-size: calc(100% - (var(--margin) * 2));
    max-block-size: calc(100% - (var(--margin) * 2));
  }
}

/**
 * Reel layout primitive.
 *
 * @see https://every-layout.dev/layouts/reel/
 */
@mixin reel() {
  display: flex;
  block-size: auto;
  overflow-x: auto;
  overflow-y: hidden;
  scrollbar-color: #fff #000;

  &::-webkit-scrollbar {
    block-size: 1rem;
  }

  &::-webkit-scrollbar-track {
    background-color: #000;
  }

  &::-webkit-scrollbar-thumb {
    background-color: #000;
    background-image: linear-gradient(#000 0, #000 0.25rem, #fff 0.25rem, #fff 0.75rem, #000 0.75rem);
  }

  & > * {
    flex: 0 0 auto;
  }

  & > img {
    block-size: 100%;
    flex-basis: auto;
    width: auto;
  }

  & > * + * {
    margin-inline-start: 1rem;
  }

  &.overflowing {
    padding-block-end: 1rem;
  }
}

/**
 * Sidebar layout primitive.
 *
 * @see https://every-layout.dev/layouts/sidebar/
 *
 * @param string $side
 * @param string $sidebar-width
 * @param string $content-min
 * @param string $gap
 */
@mixin sidebar(
  $content-min: 50%,
  $gap: 1rem,
  $side: left,
  $sidebar-width: 300px,
) {
  display: flex;
  flex-wrap: wrap;
  gap: $gap;

  @if $side == left {
    & > :first-child {
      @if $sidebar-width {
        flex-basis: $sidebar-width;
      }
      flex-grow: 1;
    }

    & > :last-child {
      flex-basis: 0;
      flex-grow: 999;
      min-inline-size: $content-min;
    }
  } @else {
    & > :last-child {
      @if $sidebar-width {
        flex-basis: $sidebar-width;
      }
      flex-grow: 1;
    }

    & > :first-child {
      flex-basis: 0;
      flex-grow: 999;
      min-inline-size: $content-min;
    }
  }
}

/**
 * Stack layout primitive.
 *
 * @see https://every-layout.dev/layouts/stack/
 */
@mixin stack(
  $spacer: 1rem
) {
  display: flex;
  flex-direction: column;

  > * {
    margin-block: 0;
  }

  > * + * {
    margin-block-start: $spacer;
  }
}

/**
 * Switcher layout primitive.
 *
 * @see https://every-layout.dev/layouts/switcher/
 *
 * @param string $threshold The container width at which the component switches
 *                          between a horizontal and vertical layout.
 * @param string $gap       The space (margin) between the (child) elements.
 * @param int    $limit     The maximum number of elements allowed to appear in
 *                          the horizontal configuration.
 */
@mixin switcher(
  $limit: 4,
  $gap: 1rem,
  $threshold: 30rem,
) {
  display: flex;
  flex-wrap: wrap;
  gap: $gap;

  > * {
    flex-grow: 1;
    flex-basis: calc( ( $threshold - 100% ) * 999 );
  }

  @if ( $limit ) {
    > :nth-last-child( n + #{ $limit } ),
    > :nth-last-child( n + #{ $limit } ) ~ * {
      flex-basis: 100%;
    }
  }
}